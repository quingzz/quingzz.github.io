[
  {
    "objectID": "blog/visualize_lct/lct_viz.html",
    "href": "blog/visualize_lct/lct_viz.html",
    "title": "Linear Chain Trick crash course",
    "section": "",
    "text": "Before we dive in\n\n\n\n\n\nThe goal of this blog post:\n\nIntroduce Linear Chain Trick\nExplain Linear Chain Trick in a more “digestable” way (hopefully)\n\nWhat this blog post does NOT provide:\n\nDetailed mathematical proof for Linear Chain Trick\nMore advanced use cases (e.g., transition to multiple compartments)\n\nWho is this for?\n\nThose who are relatively new to compartmental modeling (like me) but already know the basics (e.g., able to understand the SIR model)\nAnd, of course, those who are interested to learn and understand Linear Chain Trick"
  },
  {
    "objectID": "blog/visualize_lct/lct_viz.html#background",
    "href": "blog/visualize_lct/lct_viz.html#background",
    "title": "Linear Chain Trick crash course",
    "section": "Background",
    "text": "Background\nTraditionally, SIR are formulated using the following ODE\n\\[\n\\begin{cases}\ndS = - \\beta \\frac{I}{N} S \\\\\ndI = \\beta \\frac{I}{N} S - \\mu I \\\\\ndR = \\mu I\n\\end{cases}\n\\]\nWith the underlying assumption that the infectious period (time to move from I to R or dwell-time in I compartment) is exponentially distributed (with rate \\(\\mu\\) and mean infectious time \\(\\frac{1}{\\mu}\\) ). This was proven to be inadequate to capture many disease dynamics, as such, several formulations were suggested to incorporate other types of distributions.\nLinear Chain Trick (LCT) in particular, is for modeling Erlang distributed infectious period (i.e., Gamma distribution with integer shape)."
  },
  {
    "objectID": "blog/visualize_lct/lct_viz.html#linear-chain-trick",
    "href": "blog/visualize_lct/lct_viz.html#linear-chain-trick",
    "title": "Linear Chain Trick crash course",
    "section": "Linear Chain Trick",
    "text": "Linear Chain Trick\n\nFormulation\nThe generalized formulation for \\(I \\rightarrow R\\) transition where infectious period is Erlang distributed is as followed\n\\[\n\\begin{cases}\ndI_1 = - rI_1 \\\\\ndI_2 = rI_1 - rI_2 \\\\\n\\vdots \\\\\ndI_k = rI_{k - 1} - rI_k \\\\\ndR = rI_k\n\\end{cases}\n\\]\nWhere:\n\n\\(k\\) is the shape parameter of the Erlang distribution\n\\(r\\) is the rate parameter of the Erlang distribution\n\n\n\n\n\n\n\nExample\n\n\n\n\n\nFor Erlang distribution with rate=1/4, shape = 3, the formulation would be\n\\[\n\\begin{cases}\ndI_1 = -\\frac{1}{4}I_1 \\\\\ndI_2 = \\frac{1}{4}I_1 -\\frac{1}{4}I_2 \\\\\ndI_3 = \\frac{1}{4}I_2 -\\frac{1}{4}I_3 \\\\\ndR = \\frac{1}{4}I_3\n\\end{cases}\n\\]\n\n\n\nThe intuition of what is going on: The key idea is to delay the transition from I to R by introducing sub-compartment(s) i.e, \\(I_1\\), \\(I_2\\), …, \\(I_k\\).\n\n\nA closer look at the formulation\n\n   Wait, then when shape = 1, isn't that the same ODE from when the infectious period is exponentially distributed?  \nYes! if you plug k = 1 in the formula for Erlang distribution, you will get the formula for exponential distribution.\nRecall that\n\\[\n\\text{Erlang}(rate=r , shape=k) = \\frac{r^k x^{k-1} e^{-r x}}{(k-1)!}\n\\]\nWhen k=1\n\\[\n\\text{Erlang}(rate=r , shape=1) = \\frac{r x^{0} e^{-r x}}{(0)!} = r e^{-r x}\n\\]\n\n\n   \n  But why the ODE for Erlang distributed infectious period look like that?  \n  \nFor me, the quickest way to understand is to try differentiating the Erlang distribution function\n\\[\nf(x) =  \\frac{r^k x^{k-1} e^{-r x}}{(k-1)!}\n\\]\nUsing substitutions\n\\[\n\\begin{cases}\nu = r^k e^{-rx} \\rightarrow u' = -r^{k+1} e^{-rx}\\\\\nv = \\frac{x^{k-1}}{(k-1)!} \\rightarrow v' = \\frac{ x^{k-2} }{(k-2)!}\n\\end{cases}\n\\]\nWe have\n\\[\nf(x) = uv \\rightarrow f'(x) = u'v + uv'\n\\] \\[\nf'(x) = (-r^{k+1} e^{-rx})(\\frac{x^{k-1}}{(k-1)!}) +  (r^k e^{-rx})(\\frac{ x^{k-2} }{(k-2)!}) \\\\\n\\] \\[\nf'(x) = -r (r^{k} e^{-rx} \\frac{x^{k-1}}{(k-1)!}) + r (r^{k-1} e^{-rx})(\\frac{ x^{k-2} }{(k-2)!})\n\\]\nNotice something familiar?\n\nOn the left side of \\(+\\), we have \\(-r (r^{k} e^{-rx} \\frac{x^{k-1}}{(k-1)!}) = -r *\\text{Erlang}(k,r)\\)\nOn the right side of \\(+\\), we have \\(r (r^{k-1} e^{-rx})(\\frac{ x^{k-2} }{(k-2)!}) = r (\\frac{ r^{k-1} e^{-rx} x^{k-2} }{(k-2)!}) = r* \\text{Erlang}(k-1,r)\\)\n\nHence we have \\(\\frac{d}{dx} \\text{Erlang}(r,k) = r * \\text{Erlang}(r,k-1) - r*\\text{Erlang}(r,k)\\)\nWhich, in our formulation, is denoted as \\(dI_k = rI_{k - 1} - rI_k\\)\nNote that we need \\(I_{k-1}\\) hence the need for \\(dI_{k-1}\\), subsequently \\(dI_{k-2}\\), \\(dI_{k-3}\\) … until we reach the base case \\(dI_1\\). Which, as we previously discussed, is simply derivative of exponential distribution \\(dI_1 = -rI_1\\).\n\n\n\n\n\n\n\nThe property behind LCT\n\n\n\n\n\nLCT works by exploiting a property of Poisson processes: the time to \\(k_{th}\\) event under a homogeneous Poisson process at rate \\(r\\) is Erlang distributed with shape \\(k\\) and rate \\(r\\).\nAnother way to think of it is each event is preceded by a length of time that is exponentially distributed with rate \\(r\\), and thus the time to \\(k_{th}\\) event is the sum of \\(k\\) independent and identical exponential random variables. The distribution of this sum turns out to be the Erlang distribution, with rate \\(r\\) and shape \\(k\\).\n\n\n\n\n\nImplementing LCT in deSolve\nConsider a very simple scenario where there is no incoming population for I (i.e., no S->I transition) and the infectious period is Erlang distributed with rate=1/4 and shape (k) = 3\n\nlibrary(deSolve)\nlibrary(tidyverse)\n\ntransition_func <- function(t, state, param){\n  with(as.list( c(state, param) ), {\n    dI1 = - rate*I1\n    dI2 = rate*I1 - rate*I2\n    dI3 = rate*I2 - rate*I3\n    dR = rate*I3\n    \n    list(c(dI1, dI2, dI3, dR))\n  })\n}\n\ndesolveInitialValues <- c(\n  I1 = 100,\n  I2 = 0,\n  I3 = 0,\n  R = 0\n)\n\n# ====== settings ======== \nparameters <- c(\n  rate = 1/4 # rate for Erlang distribution\n)\n\n\nsimulationDuration <- 50\ntimes <- seq(0, simulationDuration)\n\node_mod <- ode(y = desolveInitialValues, times = times, parms = parameters, func = transition_func) \node_mod <- as.data.frame(ode_mod)"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Linear Chain Trick crash course\n\n\n\n\n\n\n\n\n\nApr 3, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Phan Truong Quynh Anh",
    "section": "",
    "text": "Hello World!\nI’m Quynh Anh, an IT graduate and working as a research assistant for the Math Modelling group at Oxford Clinical Research Unit (OUCRU)."
  },
  {
    "objectID": "blog/visualize_lct/lct_viz.html#visualization",
    "href": "blog/visualize_lct/lct_viz.html#visualization",
    "title": "Linear Chain Trick crash course",
    "section": "Visualization",
    "text": "Visualization\nAnother good way to have an intuitive understanding is to visualize what is happening.\n\nPopulation in sub-compartments\nThe following plot shows how the population in each sub-compartment and the population of I (dashed line) changes over time. Note that we’re using the model from the previous section, with Erlang(r=1/4, k=3) distributed infectious period.\n\n\nCode for plotting\ni_plot <- ode_mod %>% \n  mutate(\n    I = I1 + I2 + I3\n  ) %>% \n  ggplot() +\n    geom_line(aes(x = time, y = I1, color = \"I1\")) +\n    geom_line(aes(x = time, y = I2, color = \"I2\")) +\n    geom_line(aes(x = time, y = I3, color = \"I3\")) +\n    geom_line(aes(x = time, y = I), color = \"red\", linetype = \"dashed\") + \n    scale_color_manual(\n      values = c(\"I1\" = \"cornflowerblue\", \"I2\" = \"darkblue\", \"I3\" = \"blueviolet\")\n    )+\n    labs(\n      title = \"Infectious population over time\",\n      x = \"Time\",\n      y = \"Proportion\"\n    )\ni_plot\n\n\n\n\n\nLooks familiar? If not, here is the Erlang distribution with rate = 1/4, shape=1, 2 and 3\n\n\nCode for plotting\nlibrary(patchwork)\n\n\nWarning: package 'patchwork' was built under R version 4.3.3\n\n\nCode for plotting\ngamma_dists <- data.frame(\n    x = seq(0, 50),\n    shape1 = dgamma(seq(0, 50), rate = 1/4, shape = 1),\n    shape2 = dgamma(seq(0, 50), rate = 1/4, shape = 2),\n    shape3 = dgamma(seq(0, 50), rate = 1/4, shape = 3)\n  ) %>% \n  ggplot() +\n  geom_line(aes(x=x, y=shape1, color=\"k=1\")) + \n  geom_line(aes(x=x, y=shape2, color=\"k=2\")) +\n  geom_line(aes(x=x, y=shape3, color=\"k=3\")) + \n  scale_color_manual(\n    values = c(\"k=1\" = \"cornflowerblue\", \"k=2\" = \"darkblue\", \"k=3\" = \"blueviolet\")\n  )+\n  labs(\n    x = \"Time\",\n    y = \"Probability\",\n    title = \"Erlang distribution with rate=1/4\"\n  )\n\ni_plot / gamma_dists\n\n\n\n\n\nVisually, we can also see that the distribution for dwell-time of \\(I_n\\) follows \\(Erlang(rate=r, shape=n)\\) distribution. To change the shape parameter of the Erlang distribution, we can simply change the number of sub-compartments.\n\n\nSum of k i.i.d. exponential random variables\nOne of the reason LCT works is the fact that “the sum of \\(k\\) identical, independent exponential random variables with rate \\(r\\) follows \\(\\text{Erlang}(r,k)\\) distribution”.\nTo convince this (mostly to myself) visually, we can try computing this and compare it with an Erlang distribution.\n\n\nFunction to compute sum of k i.i.d. exp variables\ncompute_dist_sum_exp <- function(rate=1/2, k=2, n = 100){\n  # divide by k so sum of k identical distribution can go up to n\n  x_range <- seq(0, n/k, by=0.05)\n  curr_density <- dexp(x_range, rate = rate)\n\n  if(k>1){\n    sapply(\n      2:k,\n      \\(curr_k){\n        # compute distribution of sum of 2 exponential random variable using convolution\n        curr_density <<- convolve(\n          curr_density,\n          rev(dexp(x_range, rate = rate)),\n          type = \"open\"\n        )\n        \n        # adjust x_range for length of the convolution \n        x_range <<- seq(0, n/k, length.out = length(curr_density))\n      }\n    )\n  }\n\n  data.frame(\n    x = seq(0, n, length.out = length(curr_density)),\n    density = curr_density/sum(curr_density)\n  )\n}\n\n\nFor this demonstration, rate = 1/2 is used, while value for \\(k\\) (i.e. shape of Erlang) can be adjusted below.\n\n\nCompute data for plotting\nn <- 20\n\nsum_k_exp <- bind_rows(\n  lapply(\n    1:10,\n    \\(curr_k){\n      compute_dist_sum_exp(k=curr_k) %>% \n      filter(x<=n) %>% \n      mutate(k=curr_k)\n    }\n  )\n)\n\nerlang_dist <- bind_rows(\n  lapply(\n    1:10,\n    \\(curr_k){\n      data.frame(\n        x = seq(0, n, 0.05),\n        density = dgamma(seq(0, n, 0.05), rate=1/2, shape=curr_k)\n      ) %>% \n      mutate(\n        # normalize\n        density = density/sum(density),\n        k = curr_k\n      )\n    }\n  )\n)\n\nwrite_csv(sum_k_exp, \"./data/sum_k_exp.csv\")\nwrite_csv(erlang_dist, \"./data/erlang_dist.csv\")\n\n\n\nPlot = import(\"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm\")\n\nsum_k_exp = FileAttachment(\"data/sum_k_exp.csv\").csv({typed:true})\nerlang_dist = FileAttachment(\"data/erlang_dist.csv\").csv({typed:true})\n\n// Slider to change shape (k)\nviewof shape = Inputs.range([1, 7], {value: 1, step: 1, label: \"Shape of Erlang\"})\n\nsum_k_exp_filtered = sum_k_exp.filter(row => row.k === shape)\nerlang_dist_filtered = erlang_dist.filter(row => row.k === shape)\n\n\n// Plotting sum of k exp variables\nPlot.plot({\n  marks: [\n    Plot.line(\n      sum_k_exp_filtered.map(d => [d.x, d.density]), \n      {stroke: \"cornflowerblue\"})\n  ],\n  title: `Probability distribution of sum of ${shape} i.i.d exponential random variables`,\n  y: {label: \"Prob\"},\n  width: 500,\n  height: 300\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({\n  marks: [\n    Plot.line(\n      erlang_dist_filtered.map(d => [d.x, d.density]), \n      {stroke: \"cornflowerblue\"})\n  ],\n  title: `Erlang distribution with rate 1/2 and shape ${shape}`,\n  y: {label: \"Prob\"},\n  width: 500,\n  height: 300\n})"
  },
  {
    "objectID": "blog/visualize_lct/lct_viz.html#recap",
    "href": "blog/visualize_lct/lct_viz.html#recap",
    "title": "Linear Chain Trick crash course",
    "section": "Recap",
    "text": "Recap\n\n\n\n\n\n\nIn this blog we have\n\n\n\n\nDiscussed the goal of Linear Chain Trick\nFormulation and implementation for Linear Chain Trick in R (using deSolve package)\n(Hopefully) provide a simple explanation for the formulation"
  }
]